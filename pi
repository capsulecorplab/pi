#!/bin/bash
#
# pi - Pharo Install - A MIT-pip-like library for Pharo Smalltalk
#
# Listing supports SmalltalkHub and GitHub.
# 	SmalltalkHub listing requires libxml2 (xmllint command)
#	GitHub listing requires jq command (it will be downloaded if not present)
# Installs currently supported for:
# 	Metacello Configurations from Catalog (command line handler: get)
# 	SmalltalkHub (command line handler: config)
#
# It works with curl or wget
# Tested on Windows 8.1 and GNU/Linux

#################################
## Pharo Installer Settings
#################################
pharoVersion=61
piVersion=0.3.3
imageName="Pharo.image"
stHubUrl="http://smalltalkhub.com/"
zeroConfUrl="https://get.pharo.org"
stHubPkgIndexFile="index.html"
# Work in verbose (1) or silent mode (0)
silentMode=0
# Default Configuration/Baseline version (stable, development, bleedingEdge)
pkgVersion="stable"
# Detected Operating System
os="Unknown"

#################################
## Helper Functions
#################################

# Echo parameter text without carriage return/new line
function echo_line () {
	[ "$silentMode" == 0 ] && echo -n $1
}

# Echo parameter text with carriage return/new line
function echo_nline () {
	[ "$silentMode" == 0 ] && echo $1
}

# Returns 0 if command was found in the current system, 1 otherwise
function cmdExists () {
    type "$1" &> /dev/null || [ -f ./$1 ];
	return $?
}

function trim_both () {
	echo $(echo -e "${1}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
}

function setDownloadApp () {
	echo_line "Checking for wget or curl..."
	if cmdExists wget ; then
		echo_nline "wget found..."
		dApp="wget"
		dListParams="-O ${stHubPkgIndexFile}"
		dPharoParams="-O-"
	elif cmdExists curl ; then
			echo_nline "curl found..."
			dApp="curl"
			dListParams="-o "$stHubPkgIndexFile
			dPharoParams=""
		else
			echo_nline "I require wget or curl, but it's not installed. (brew install wget?) Aborting."
			exit 1
	fi
}

function is64Bit () {
	[ "$(uname -m)" == "x86_64" ];
	return $?
}

function downloadWin7z () {
	local zip7Win64Exec="7z1801-x64.exe"
	local zip7Win64URL="https://www.7-zip.org/a/$zip7Win64Exec"

	local zip7Win32Exec="7z1801.exe"
	local zip7Win32URL="https://www.7-zip.org/a/$zip7Win32Exec"

	echo_nline "Downloading 7-Zip..."
	if is64Bit; then
		if [ ! -f $zip7Win64Exec ]; then
			$dApp $zip7Win64URL
		fi
		if [ ! -f /c/Program\ Files\ \(x86\)/7-Zip/7z.exe ]; then
			# Install 7z
			exec ./$zip7Win64Exec
		fi
	else
		if [ ! -f $zip7Win32Exec ]; then
			$dApp $zip7Win32URL
		fi
		# Install 7z
		exec ./$zip7Win32Exec
	fi
}

function findDistributionID () {
	# Find our distribution or OS
	echo_line "Current OS is: "
	if [ -f /etc/os-release ]; then
		# freedesktop.org and systemd
		. /etc/os-release
		os=$NAME
		ver=$VERSION_ID
	elif type lsb_release >/dev/null 2>&1; then
		# linuxbase.org
		os=$(lsb_release -si)
		ver=$(lsb_release -sr)
	elif [ -f /etc/lsb-release ]; then
		# For some versions of Debian/Ubuntu without lsb_release command
		. /etc/lsb-release
		os=$DISTRIB_ID
		ver=$DISTRIB_RELEASE
	elif [ -f /etc/debian_version ]; then
		# Older Debian/Ubuntu/etc.
		os="Debian"
		ver=$(cat /etc/debian_version)
	elif [ -f /etc/SuSe-release ]; then
		# Older SuSE/etc.
		os="SuSE"
	elif [ -f /etc/redhat-release ]; then
		# Older Red Hat, CentOS, etc.
		os="RedHat"
	else
		# Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
		os=$(uname -s)
		ver=$(uname -r)
	fi
	echo_nline "Found $os"
}

#################################################
# libXML / xmllint functions
#################################################

function installLibXMLMac () {
	local libXMLMac1="combo-2007-10-07.dmg.gz"
	local libXMLMac2="combo-20031108.dmg.gz"
	local libXMLMacURL="https://www.explain.com.au/download/"
	# Using Leopard? xmllint and libxml2 version 2.6.16 are built-in! xsltproc and libxslt version 1.1.12 are also included.
	# Using Tiger? xmllint and libxml2 version 2.6.16 are built-in! xsltproc and libxslt version 1.1.11 are also included.
	# Using Panther? xmllint and libxml2 version 2.5.4 are built-in! Even better, 10.3.9 has libxml2-2.6.16 and libxslt-1.1.9 built-in!
	$dApp $libXMLMacURL/$libXMLMac1
	$dApp $libXMLMacURL/$libXMLMac2
	# From https://www.explain.com.au/oss/libxml2xslt.html
	sudo mkdir -p /usr/local/bin
	cd /usr/local/bin
	sudo ln -s /Library/Frameworks/libxml.framework/Resources/Scripts/*
	sudo ln -s /Library/Frameworks/libxslt.framework/Resources/Scripts/*

	sudo mkdir -p /usr/local/include
	cd /usr/local/include
	sudo ln -s /Library/Frameworks/libxml.framework/Headers/*
	sudo ln -s /Library/Frameworks/libxslt.framework/Headers/*
	sudo ln -s /Library/Frameworks/libexslt.framework/Headers/*

	mkdir -p /usr/local/lib
	cd /usr/local/lib
	sudo ln -s /Library/Frameworks/libxml.framework/libxml libxml2.dylib
	sudo ln -s /Library/Frameworks/libxslt.framework/libxslt libxslt.dylib
	sudo ln -s /Library/Frameworks/libexslt.framework/libxslt libexslt.dylib

	sudo mkdir -p /usr/local/man/man1
	sudo mkdir -p /usr/local/man/man3
	echo 'export PATH=/usr/local/bin:$PATH' >> ~/.bashrc
	echo 'export MANPATH=/usr/local/man:$MANPATH' >> ~/.bashrc
	source ~/.bashrc
}

function installLibXMLSolaris () {
	local libXMLSolarisURL="http://get.opencsw.org/now"
	pkgadd -d $libXMLSolarisURL
	/opt/csw/bin/pkgutil -U
	/opt/csw/bin/pkgutil -y -i libxml2_2
	/usr/sbin/pkgchk -L CSWlibxml2-2 # list files
}

function installLibXMLMSYS () {
	local libXMLWin32="libxml2-2.7.8.win32.zip"
	local libXMLWin32URL="ftp://ftp.zlatkovic.com/libxml"
	local libXMLWin64="libxml2-2.9.3-win32-x86_64.7z"
	local libXMLWin64URL="ftp://ftp.zlatkovic.com/libxml/64bit/"

	echo_nline "Checking LibXML..."
	# Remove any previous download of ZIP file
	if is64Bit; then
		# Check if library installer already was downloaded
		if [ ! -f $libXMLWin64 ]; then
			$dApp $libXMLWin64URL/$libXMLWin64
		fi
		# Download and install 7z to uncompress
		if [ ! -f "/c/Program\ Files\ \(x86\)/7-Zip" ]; then
			downloadWin7z
		fi
		echo_nline "Uncompressing libXML"
		/c/Program\ Files\ \(x86\)/7-Zip/7z.exe x $libXMLWin64
		# Copy to current directory
		cp -v $libXMLWin64/bin/* .
	else
		# Check if library installer already was downloaded
		if [ ! -f $libXMLWin32 ]; then
			$dApp $libXMLWin32URL/$libXMLWin32
		fi
		unzip -u $libXMLWin32
		# Copy to current directory
		cp -v $libXMLWin32/bin/* .
	fi
}

function downloadLibXML () {
	setDownloadApp
	if ! cmdExists xmllint; then
		echo_nline "Trying to install libxml2..."
		case "$OSTYPE" in
			solaris*)
				installLibXMLSolaris
				;;
			darwin*)
				installLibXMLMac
				;;
			linux*)
				echo "Should be implemented"
				;;
			bsd*)
				echo_line "BSD seems not supported by libxml2. See http://www.xmlsoft.org for details"
				;;
			msys*)
				installLibXMLMSYS
				;;
			*)
				echo "unknown: $OSTYPE"
				;;
		esac
		echo_nline "done"
	fi
}

# Search argument XPATH expression in HTML file
function xpath() {
	if [ $# -ne 2 ]; then
		echo "Usage: xpath xpath file"
		return 1
	fi
	downloadLibXML
	# GitBash doesn't provide /usr/local/bin and cannot copy xmllint.exe to any PATH directory without permission denied
	if cmdExists xmllint; then
		./xmllint --nonet --html --shell $2 <<< "cat $1" | sed '/^\/ >/d;/^\ /d'
	else
		xmllint --nonet --html --shell $2 <<< "cat $1" | sed '/^\/ >/d;/^\ /d'
	fi
}

#########################################
# PI Options
#########################################

function versionString () {
	silentMode=0
	echo_nline "pi - Pharo Install [version $piVersion]"
}

function printHelp () {
	silentMode=0
cat << EOF
pi - Pharo Install [version $piVersion]

PI is a tool for installing Pharo Smalltalk packages.

The options include:
		listgh			List packages found in GitHub
		listsh			List packages found in SmalltalkHub
		countsh			Report how many packages were found in SmalltalkHub
		countgh			Report how many packages were found in GitHub
		search <pgname>		Search for pkgname in SmalltalkHub and GitHub repositories
		searchgh <pkgname>	Search for pkgname in GitHub repository
		searchsh <pkgname>	Search for pkgname in SmalltalkHub repository
		image			Fetch the latest stable Pharo (VM + Image).
		examples		Show usage examples
		version 		Show program version
		install <pkgname>	Install pkgname to the image found in the current working directory. Download the image if not found.

		--dev			Set Configuration/Baseline to install development versions.
		--bleedingEdge		Set Configuration/Baseline to install bleedingEdge version.

Pharo Install project home page: https://github.com/hernanmd/pi
To report bugs or get some help check: https://github.com/hernanmd/pi/issues
This software is licensed under the MIT License.
EOF
}

function examples () {
	echo "
List GitHub packages:
$0 listgh

List SmalltalkHub packages:
$0 listsh

Search Both SmalltalkHub and GitHub packages:
$0 search pillar

Download latest stable Pharo image and VM:
$0 image

Install multiple packages:
$0 install Diacritics ISO3166 StringExtensions"
}

#################################
## Pharo Installation Functions
#################################

# Currently not used

# For Debian, Slackware and Ubuntu
function apt_install () {
	sudo dpkg --add-architecture i386
	sudo apt-get update
	sudo apt-get install libc6:i386 libssl1.0.0:i386 libfreetype6:i386
}

# For ElementaryOS
function ppa_install () {
	add-apt-repository ppa:pharo/stable
	apt-get update
	apt-get install pharo-vm-desktop
}

# For CentOS/RedHat
function yum_install () {
	yum install ld-linux.so.2 \
		glibc-devel.i686 \
		glibc-static.i686 \
		glibc-utils.i686 \
		libX11.i686 \
		libX11-devel.i686 \
		mesa-libGL.i686 \
		mesa-libGL-devel.i686 \
		libICE.i686 \
		libICE-devel.i686 \
		libSM.i686
}

# Prefer provider packages if distribution was found
function install_pharo () {
	silentMode=1
	findDistributionID
	case $os in
		"elementary" )
			ppa_install
			;;
		"CentOS*" | "RedHat*" )
			yum_install
			;;
		"Ubuntu*")
			ppa_install
			;;
		* )
			echo_nline "Installing Pharo from get.pharo.org"
			dlPharo
			;;
	esac
}

#################################
## Packages Installation Functions
#################################

function dlStHubPkgNames () {
	setDownloadApp
	local listUrl=$stHubUrl"list"
	$dApp $dListParams $listUrl
}

function fetchGitHubPkgNames () {
	setDownloadApp

	## https://github.com/derak/github-api-bash/blob/master/github_org_email_hooks.sh ????
	## Issue
	# local ghPharoHeader="https://api.github.com/search/repositories?per_page=100&q=topic:pharo"
	# $dApp $dlGhHeader $ghPharoHeader 2>&1 | grep -i "^\ *link"

	local ghPharoTopics="https://api.github.com/search/repositories?per_page=100&q=topic:pharo"
	# local GH_HEADER="Accept: application/vnd.github.mercy-preview+json"
	local ghPharoIndexFile="pharo.js"
	# Download JSON file if not present
	[ -f $ghPharoIndexFile ] || $dApp $ghPharoTopics -O $ghPharoIndexFile

	if ! cmdExists jq; then
		# wget http://stedolan.github.io/jq/download/linux32/jq (32-bit system)
		echo_nline "Trying to download jq..."
		case "$OSTYPE" in
			solaris*)
				echo_line "Solaris seems not supported by jq. See https://stedolan.github.io/jq/ for details"
				;;
			darwin*)
				$dApp https://github.com/stedolan/jq/releases/download/jq-1.5/jq-osx-amd64
				chmod +x ./jq
				;;
			linux*)
				$dApp http://stedolan.github.io/jq/download/linux64/jq
				chmod +x ./jq
				;;
			bsd*)
				echo_line "BSD seems not supported by jq. See https://stedolan.github.io/jq/ for details"
				;;
			msys*)
				$dApp -O jq.exe https://github.com/stedolan/jq/releases/download/jq-1.5/jq-win64.exe
				;;
			*)
				echo "unknown: $OSTYPE"
				;;
		esac
	fi
	# https://github.com/hernanmd/pi/issues/7
	if cmdExists jq; then
		pkgs=$(jq '.items[].full_name' $ghPharoIndexFile)
	else
		pkgs=$(./jq '.items[].full_name' $ghPharoIndexFile)
	fi
}

function fetchStHubPkgNames () {
	echo_nline "Checking package list file..."
	if [ ! -f $stHubPkgIndexFile ]; then
		echo_nline "not found"
		echo_nline "Downloading packages list..."
		dlStHubPkgNames
	else
		echo_line "found $stHubPkgIndexFile"
	fi
	downloadLibXML
	pkgs=$(xpath "//a[@class=\"project\"]/text()" $stHubPkgIndexFile)
}

# Report how many packages were found in SmalltalkHub
function countsh_packages () {
	silentMode=1
	fetchStHubPkgNames
	echo -ne "$pkgs" | wc -l
}

# Report how many packages were found in GitHub
function countgh_packages () {
	silentMode=1
	fetchGitHubPkgNames
	echo -ne "$pkgs" | wc -l
}

# Install from Catalog
function pkgCatalogInstall () {
	pkgName=$1
	./pharo $imageName get $pkgName
	return $?
}

# Detect which Configuration version to install.
# This setting is global: Applied to all Configuration names passed as parameters.
function setPkgVersionSetting () {
	echo_nline "Setting package version..."
	for param in "$@"; do
		case $param in
			"--dev")
				pkgVersion="development"
				;;
			"--bleedingEdge")
				pkgVersion="bleedingEdge"
				;;
		esac
	done
	echo_nline "Selected package version: $pkgVersion"
}

# Install from STHub
# Currently uses exact match for package names
function pkgSHInstall () {
	pkgName=$1
	fetchStHubPkgNames
	pkgFound=$(echo "$pkgs" | grep -w $pkgName)
	pkgCount=$(echo "$pkgFound" | wc -l)
	echo "Found $pkgCount package(s) with the name $pkgName."
	if [ "$pkgCount" -gt 1 ]; then
		echo "Listing follows..."
		cat -n <<< "$pkgFound"
		return 1
	else
		echo "Selected package: $pkgFound"
		IFS=/ read p USER <<< "$pkgFound"
		repoUrl=$stHubUrl"mc/"$USER/$pkgName
		echo "Repository: $repoUrl"
	fi
	echo "Install command: ./pharo $imageName config $repoUrl "ConfigurationOf"$pkgName --install=$pkgVersion --printVersion"
	./pharo $imageName config $repoUrl "ConfigurationOf"$pkgName --install=$pkgVersion --printVersion
	return $?
}

# Install from GitHub
# Currently uses exact match for package names
function pkgGHInstall () {
	pkgName=$1
	fetchGitHubPkgNames
	pkgFound=$(echo "$PKGS" | grep -w $pkgName)
	pkgCount=$(echo "$pkgFound" | wc -l)

	echo "Found $pkgCount package(s) with the name $pkgName."
	if [ "$pkgCount" -gt 1 ]; then
		echo "Listing follows..."
		cat -n <<< "$pkgFound"
		return 1
	else
		echo "Selected package: $pkgFound"
		IFS=/ read p user <<< "$pkgFound"

		echo "Packages = $PKGS"
		echo "User = $user"
		echo "Pk = $pkgFound"
		# Download README.md file
		# $dApp $dListParams "https://github.com/$user/$pkgName/blob/master/README.md"
		[ -f "README.md" ] ||
		# Extract installation expression from tag
		#local instStExpr=$(grep "^\[//]\:\ #\ (pist)" README.md | sed 's/.*smalltalk//;s/\(.*\).../\1/')
		#local instDevExpr=$(grep "^\[//]\:\ #\ (pidev)" README.md | sed 's/.*smalltalk//;s/\(.*\).../\1/')
		if [ -z $instStExpr ]; then
			echo "Installation expression not found."
			return $?
		fi
	fi
	echo "Install command: ./pharo $imageName eval $instExpr"
	./pharo $imageName eval $instExpr
	return $?
}


# Read argument packages and install from their repositories
function install_packages () {
	until [ -z "$1" ]; do
		echo_nline "Trying to install from Pharo Catalog..."
		if ! (pkgCatalogInstall $1); then
			echo_nline "not found"
			echo_nline "Trying to install from SmalltalkHub..."
			if ! (pkgSHInstall $1); then
				echo_nline "not found"
				echo_nline "Trying to install from GitHub..."
				if ! (pkgGHInstall $1); then
					echo_line "not found"
				else
					echo_nline "done"
				fi
			else
				echo_nline "done"
			fi
		else
			echo_nline "done"
		fi
		shift
	done
}

###################################
## Pharo Searching Packages Section
###################################

# Search for package passed as argument in the SmalltalkHub repository
function searchsh_packages () {
	silentMode=1
	fetchStHubPkgNames
	printf -- '%s\n' "$pkgs[@]" | grep -i "$1" | sed 's/^/SmalltalkHub\: /'
}

# Search for package passed as argument in the GitHub repository
function searchgh_packages () {
	silentMode=1
	fetchGitHubPkgNames
	printf -- '%s\n' "$pkgs[@]" | grep -i "$1" | sed 's/^/GitHub\: /'
}

# Search for package passed as argument in all supported repositories
function search_packages () {
	silentMode=1
	searchsh_packages $1
	searchgh_packages $1
}

#################################
## Pharo Installation Section
#################################
function dlPharo () {
	silentMode=0
	echo_nline "Checking Pharo installation already present..."
	if [ ! -f $imageName ]; then
		echo_nline "not found"
		setDownloadApp
		echo_nline "Downloading Pharo (stable version)..."
#		exec $dApp $dPharoParams get.pharo.org/$pharoVersion+vm | bash
		exec $dApp $dPharoParams $zeroConfUrl | bash
	else
		echo_nline "found $imageName in the current directory"
	fi

	if [ ! -f pharo ]; then
		echo_nline "Try again. Pharo was not downloaded correctly, exiting"
		exit 1
	fi
}

#################################
## Main Section
#################################

case $1 in
	listgh | listGH | LISTGH )
		silentMode=0
		fetchGitHubPkgNames
		echo "$pkgs"
		;;
	listsh | listSH | LISTSH )
		silentMode=0
		fetchStHubPkgNames
		echo "$pkgs"
		;;
	help | h )
		printHelp
		;;
	countsh | COUNTSH )
		silentMode=1
		countsh_packages
		;;
	countgh | COUNTSH )
		countgh_packages
		;;
	install | INSTALL )
		install_pharo
		install_packages "${@:2}"
		;;
	image | IMAGE )
		install_pharo
		;;
	searchsh )
		searchsh_packages "${@:2}"
		;;
	searchgh )
		searchgh_packages "${@:2}"
		;;
	search )
		search_packages "${@:2}"
		;;
	version )
		versionString
		;;
	examples | EXAMPLES )
		examples && exit 0
		;;
	"--dev" | "--bleedingEdge")
		setPkgVersionSetting "${@}"
		#install_pharo
		#install_packages "${@:3}"
		;;
	* )
	echo $"Usage: $0 {list | listGH | listSH | countGH | countSH | image | examples | [--dev|--bleedingEdge] install <pkgname>}"
	exit 1
esac
